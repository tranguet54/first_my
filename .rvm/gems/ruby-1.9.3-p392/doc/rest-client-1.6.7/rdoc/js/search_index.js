var search_data = {"index":{"searchIndex":["mime","types","net","http","patch","protocol","restclient","abstractresponse","exception","exceptionwithresponse","exceptions","maxredirectsreached","payload","base","multipart","streamed","urlencoded","rawresponse","redirect","request","redirect","requestfailed","requestfailed","resource","response","responseforexception","sslcertificatenotverified","serverbrokeconnection","<<()","[]()","__request__()","add_before_execution_proc()","beautify_headers()","boundary()","build_stream()","build_stream()","build_stream()","build_stream()","close()","close()","code()","cookies()","create()","create_file_field()","create_log()","create_regular_field()","decode()","default_headers()","delete()","delete()","description()","execute()","execute()","fetch_body()","flatten_params()","flatten_params_array()","follow_redirection()","generate()","get()","get()","handle_key()","handle_key()","has_file?()","has_file_array?()","head()","head()","headers()","headers()","headers()","headers()","headers()","http_body()","http_code()","inspect()","inspect()","length()","length()","log=()","log_request()","log_response()","make_headers()","message()","message()","message()","method_missing()","mime_for()","net_http_class()","net_http_request_class()","new()","new()","new()","new()","new()","new()","new()","new()","new()","open_timeout()","options()","parse_url()","parse_url_with_auth()","password()","patch()","patch()","patch()","post()","post()","process_payload()","process_result()","process_url_params()","put()","put()","raw_headers()","read()","request()","reset_before_execution_procs()","return!()","send_entity()","setup_credentials()","short_inspect()","size()","size()","size()","stringify_headers()","timeout()","to_i()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","transmit()","type_for_extension()","type_for_extension()","user()","version()","readme"],"longSearchIndex":["mime","mime::types","net","net::http","net::http::patch","net::http::protocol","restclient","restclient::abstractresponse","restclient::exception","restclient::exceptionwithresponse","restclient::exceptions","restclient::maxredirectsreached","restclient::payload","restclient::payload::base","restclient::payload::multipart","restclient::payload::streamed","restclient::payload::urlencoded","restclient::rawresponse","restclient::redirect","restclient::request","restclient::request::redirect","restclient::request::requestfailed","restclient::requestfailed","restclient::resource","restclient::response","restclient::responseforexception","restclient::sslcertificatenotverified","restclient::serverbrokeconnection","restclient#<<()","restclient::resource#[]()","net::http#__request__()","restclient::add_before_execution_proc()","restclient::abstractresponse::beautify_headers()","restclient::payload::multipart#boundary()","restclient::payload::base#build_stream()","restclient::payload::multipart#build_stream()","restclient::payload::streamed#build_stream()","restclient::payload::urlencoded#build_stream()","restclient::payload::base#close()","restclient::payload::multipart#close()","restclient::abstractresponse#code()","restclient::abstractresponse#cookies()","restclient::response::create()","restclient::payload::multipart#create_file_field()","restclient::create_log()","restclient::payload::multipart#create_regular_field()","restclient::request::decode()","restclient::request#default_headers()","restclient::delete()","restclient::resource#delete()","restclient::abstractresponse#description()","restclient::request::execute()","restclient::request#execute()","restclient::request#fetch_body()","restclient::payload::base#flatten_params()","restclient::payload::base#flatten_params_array()","restclient::abstractresponse#follow_redirection()","restclient::payload#generate()","restclient::get()","restclient::resource#get()","restclient::payload::multipart#handle_key()","restclient::payload::urlencoded#handle_key()","restclient::payload#has_file?()","restclient::payload#has_file_array?()","restclient::head()","restclient::resource#head()","restclient::abstractresponse#headers()","restclient::payload::base#headers()","restclient::payload::multipart#headers()","restclient::payload::urlencoded#headers()","restclient::resource#headers()","restclient::exception#http_body()","restclient::exception#http_code()","restclient::exception#inspect()","restclient::payload::base#inspect()","restclient::payload::base#length()","restclient::payload::streamed#length()","restclient::log=()","restclient::request#log_request()","restclient::request#log_response()","restclient::request#make_headers()","restclient::exception#message()","restclient::requestfailed#message()","restclient::requestfailed#message()","restclient::responseforexception#method_missing()","restclient::payload::multipart#mime_for()","restclient::request#net_http_class()","restclient::request#net_http_request_class()","restclient::exception::new()","restclient::payload::base::new()","restclient::rawresponse::new()","restclient::redirect::new()","restclient::redirect::new()","restclient::request::new()","restclient::resource::new()","restclient::sslcertificatenotverified::new()","restclient::serverbrokeconnection::new()","restclient::resource#open_timeout()","restclient::options()","restclient::request#parse_url()","restclient::request#parse_url_with_auth()","restclient::resource#password()","net::http::protocol#patch()","restclient::patch()","restclient::resource#patch()","restclient::post()","restclient::resource#post()","restclient::request#process_payload()","restclient::request#process_result()","restclient::request#process_url_params()","restclient::put()","restclient::resource#put()","restclient::abstractresponse#raw_headers()","restclient::payload::base#read()","net::http#request()","restclient::reset_before_execution_procs()","restclient::abstractresponse#return!()","net::http::protocol#send_entity()","restclient::request#setup_credentials()","restclient::payload::base#short_inspect()","restclient::payload::base#size()","restclient::payload::streamed#size()","restclient::rawresponse#size()","restclient::request#stringify_headers()","restclient::resource#timeout()","restclient::abstractresponse#to_i()","restclient::exception#to_s()","restclient::payload::base#to_s()","restclient::rawresponse#to_s()","restclient::requestfailed#to_s()","restclient::requestfailed#to_s()","restclient::resource#to_s()","restclient::request#transmit()","mime::types::type_for_extension()","mime::types#type_for_extension()","restclient::resource#user()","restclient::version()",""],"info":[["MIME","","MIME.html","",""],["MIME::Types","","MIME/Types.html","",""],["Net","","Net.html","",""],["Net::HTTP","","Net/HTTP.html","",""],["Net::HTTP::Patch","","Net/HTTP/Patch.html","",""],["Net::HTTP::Protocol","","Net/HTTP/Protocol.html","","<p>Code taken from this commit:\ngithub.com/ruby/ruby/commit/ab70e53ac3b5102d4ecbe8f38d4f76afad29d37d#lib/net/http.rb\n…\n"],["RestClient","","RestClient.html","","<p>This module’s static methods are the entry point for using the REST client.\n\n<pre># GET\nxml = RestClient.get ...</pre>\n"],["RestClient::AbstractResponse","","RestClient/AbstractResponse.html","",""],["RestClient::Exception","","RestClient/Exception.html","","<p>This is the base RestClient exception class. Rescue it if you want to catch\nany exception that your request …\n"],["RestClient::ExceptionWithResponse","","RestClient/ExceptionWithResponse.html","","<p>Compatibility\n"],["RestClient::Exceptions","","RestClient/Exceptions.html","","<p>We will a create an exception for each status code, see\nwww.w3.org/Protocols/rfc2616/rfc2616-sec10.html …\n"],["RestClient::MaxRedirectsReached","","RestClient/MaxRedirectsReached.html","",""],["RestClient::Payload","","RestClient/Payload.html","",""],["RestClient::Payload::Base","","RestClient/Payload/Base.html","",""],["RestClient::Payload::Multipart","","RestClient/Payload/Multipart.html","",""],["RestClient::Payload::Streamed","","RestClient/Payload/Streamed.html","",""],["RestClient::Payload::UrlEncoded","","RestClient/Payload/UrlEncoded.html","",""],["RestClient::RawResponse","","RestClient/RawResponse.html","","<p>The response from RestClient on a raw request looks like a string, but is\nactually one of these.  99% …\n"],["RestClient::Redirect","","RestClient/Redirect.html","","<p>A redirect was encountered; caught by execute to retry with the new url.\n"],["RestClient::Request","","RestClient/Request.html","","<p>This class is used internally by RestClient to send the request, but you\ncan also call it directly if …\n"],["RestClient::Request::Redirect","","RestClient/Redirect.html","","<p>A redirect was encountered; caught by execute to retry with the new url.\n"],["RestClient::Request::RequestFailed","","RestClient/RequestFailed.html","","<p>The request failed with an error code not managed by the code\n"],["RestClient::RequestFailed","","RestClient/RequestFailed.html","","<p>The request failed with an error code not managed by the code\n"],["RestClient::Resource","","RestClient/Resource.html","","<p>A class that can be instantiated for access to a RESTful resource,\nincluding authentication.\n<p>Example: …\n"],["RestClient::Response","","RestClient/Response.html","","<p>A Response from RestClient, you can access the response body, the code or\nthe headers.\n"],["RestClient::ResponseForException","","RestClient/ResponseForException.html","","<p>Compatibility : make the Response act like a Net::HTTPResponse when needed\n"],["RestClient::SSLCertificateNotVerified","","RestClient/SSLCertificateNotVerified.html","",""],["RestClient::ServerBrokeConnection","","RestClient/ServerBrokeConnection.html","","<p>The server broke the connection prior to the request completing.  Usually\nthis means it crashed, or sometimes …\n"],["<<","RestClient","RestClient.html#method-i-3C-3C","(obj)",""],["[]","RestClient::Resource","RestClient/Resource.html#method-i-5B-5D","(suburl, &new_block)","<p>Construct a subresource, preserving authentication.\n<p>Example:\n\n<pre>site = RestClient::Resource.new('http://example.com', ...</pre>\n"],["__request__","Net::HTTP","Net/HTTP.html#method-i-__request__","(req, body=nil, &block)","<p>Replace the request method in Net::HTTP to sniff the body type and set the\nstream if appropriate\n<p>Taken …\n"],["add_before_execution_proc","RestClient","RestClient.html#method-c-add_before_execution_proc","(&proc)","<p>Add a Proc to be called before each request in executed. The proc\nparameters will be the http request …\n"],["beautify_headers","RestClient::AbstractResponse","RestClient/AbstractResponse.html#method-c-beautify_headers","(headers)",""],["boundary","RestClient::Payload::Multipart","RestClient/Payload/Multipart.html#method-i-boundary","()",""],["build_stream","RestClient::Payload::Base","RestClient/Payload/Base.html#method-i-build_stream","(params)",""],["build_stream","RestClient::Payload::Multipart","RestClient/Payload/Multipart.html#method-i-build_stream","(params)",""],["build_stream","RestClient::Payload::Streamed","RestClient/Payload/Streamed.html#method-i-build_stream","(params = nil)",""],["build_stream","RestClient::Payload::UrlEncoded","RestClient/Payload/UrlEncoded.html#method-i-build_stream","(params = nil)",""],["close","RestClient::Payload::Base","RestClient/Payload/Base.html#method-i-close","()",""],["close","RestClient::Payload::Multipart","RestClient/Payload/Multipart.html#method-i-close","()",""],["code","RestClient::AbstractResponse","RestClient/AbstractResponse.html#method-i-code","()","<p>HTTP status code\n"],["cookies","RestClient::AbstractResponse","RestClient/AbstractResponse.html#method-i-cookies","()","<p>Hash of cookies extracted from response headers\n"],["create","RestClient::Response","RestClient/Response.html#method-c-create","(body, net_http_res, args)",""],["create_file_field","RestClient::Payload::Multipart","RestClient/Payload/Multipart.html#method-i-create_file_field","(s, k, v)",""],["create_log","RestClient","RestClient.html#method-c-create_log","(param)","<p>Create a log that respond to &lt;&lt; like a logger param can be ‘stdout’,\n‘stderr’, a string (then we …\n"],["create_regular_field","RestClient::Payload::Multipart","RestClient/Payload/Multipart.html#method-i-create_regular_field","(s, k, v)",""],["decode","RestClient::Request","RestClient/Request.html#method-c-decode","(content_encoding, body)",""],["default_headers","RestClient::Request","RestClient/Request.html#method-i-default_headers","()",""],["delete","RestClient","RestClient.html#method-c-delete","(url, headers={}, &block)",""],["delete","RestClient::Resource","RestClient/Resource.html#method-i-delete","(additional_headers={}, &block)",""],["description","RestClient::AbstractResponse","RestClient/AbstractResponse.html#method-i-description","()",""],["execute","RestClient::Request","RestClient/Request.html#method-c-execute","(args, & block)",""],["execute","RestClient::Request","RestClient/Request.html#method-i-execute","(& block)",""],["fetch_body","RestClient::Request","RestClient/Request.html#method-i-fetch_body","(http_response)",""],["flatten_params","RestClient::Payload::Base","RestClient/Payload/Base.html#method-i-flatten_params","(params, parent_key = nil)","<p>Flatten parameters by converting hashes of hashes to flat hashes {keys1\n=&gt; {keys2 =&gt; value}} will …\n"],["flatten_params_array","RestClient::Payload::Base","RestClient/Payload/Base.html#method-i-flatten_params_array","(value, calculated_key)",""],["follow_redirection","RestClient::AbstractResponse","RestClient/AbstractResponse.html#method-i-follow_redirection","(request = nil, result = nil, & block)","<p>Follow a redirection\n"],["generate","RestClient::Payload","RestClient/Payload.html#method-i-generate","(params)",""],["get","RestClient","RestClient.html#method-c-get","(url, headers={}, &block)",""],["get","RestClient::Resource","RestClient/Resource.html#method-i-get","(additional_headers={}, &block)",""],["handle_key","RestClient::Payload::Multipart","RestClient/Payload/Multipart.html#method-i-handle_key","(key)","<p>for Multipart do not escape the keys\n"],["handle_key","RestClient::Payload::UrlEncoded","RestClient/Payload/UrlEncoded.html#method-i-handle_key","(key)","<p>for UrlEncoded escape the keys\n"],["has_file?","RestClient::Payload","RestClient/Payload.html#method-i-has_file-3F","(params)",""],["has_file_array?","RestClient::Payload","RestClient/Payload.html#method-i-has_file_array-3F","(params)",""],["head","RestClient","RestClient.html#method-c-head","(url, headers={}, &block)",""],["head","RestClient::Resource","RestClient/Resource.html#method-i-head","(additional_headers={}, &block)",""],["headers","RestClient::AbstractResponse","RestClient/AbstractResponse.html#method-i-headers","()","<p>A hash of the headers, beautified with symbols and underscores. e.g.\n“Content-type” will become …\n"],["headers","RestClient::Payload::Base","RestClient/Payload/Base.html#method-i-headers","()",""],["headers","RestClient::Payload::Multipart","RestClient/Payload/Multipart.html#method-i-headers","()",""],["headers","RestClient::Payload::UrlEncoded","RestClient/Payload/UrlEncoded.html#method-i-headers","()",""],["headers","RestClient::Resource","RestClient/Resource.html#method-i-headers","()",""],["http_body","RestClient::Exception","RestClient/Exception.html#method-i-http_body","()",""],["http_code","RestClient::Exception","RestClient/Exception.html#method-i-http_code","()",""],["inspect","RestClient::Exception","RestClient/Exception.html#method-i-inspect","()",""],["inspect","RestClient::Payload::Base","RestClient/Payload/Base.html#method-i-inspect","()",""],["length","RestClient::Payload::Base","RestClient/Payload/Base.html#method-i-length","()",""],["length","RestClient::Payload::Streamed","RestClient/Payload/Streamed.html#method-i-length","()",""],["log=","RestClient","RestClient.html#method-c-log-3D","(log)","<p>Setup the log for RestClient calls. Value should be a logger but can can be\nstdout, stderr, or a filename. …\n"],["log_request","RestClient::Request","RestClient/Request.html#method-i-log_request","()",""],["log_response","RestClient::Request","RestClient/Request.html#method-i-log_response","(res)",""],["make_headers","RestClient::Request","RestClient/Request.html#method-i-make_headers","(user_headers)",""],["message","RestClient::Exception","RestClient/Exception.html#method-i-message","()",""],["message","RestClient::RequestFailed","RestClient/RequestFailed.html#method-i-message","()",""],["message","RestClient::RequestFailed","RestClient/RequestFailed.html#method-i-message","()",""],["method_missing","RestClient::ResponseForException","RestClient/ResponseForException.html#method-i-method_missing","(symbol, *args)",""],["mime_for","RestClient::Payload::Multipart","RestClient/Payload/Multipart.html#method-i-mime_for","(path)",""],["net_http_class","RestClient::Request","RestClient/Request.html#method-i-net_http_class","()",""],["net_http_request_class","RestClient::Request","RestClient/Request.html#method-i-net_http_request_class","(method)",""],["new","RestClient::Exception","RestClient/Exception.html#method-c-new","(response = nil, initial_response_code = nil)",""],["new","RestClient::Payload::Base","RestClient/Payload/Base.html#method-c-new","(params)",""],["new","RestClient::RawResponse","RestClient/RawResponse.html#method-c-new","(tempfile, net_http_res, args)",""],["new","RestClient::Redirect","RestClient/Redirect.html#method-c-new","(url)",""],["new","RestClient::Redirect","RestClient/Redirect.html#method-c-new","(url)",""],["new","RestClient::Request","RestClient/Request.html#method-c-new","(args)",""],["new","RestClient::Resource","RestClient/Resource.html#method-c-new","(url, options={}, backwards_compatibility=nil, &block)",""],["new","RestClient::SSLCertificateNotVerified","RestClient/SSLCertificateNotVerified.html#method-c-new","(message)",""],["new","RestClient::ServerBrokeConnection","RestClient/ServerBrokeConnection.html#method-c-new","(message = 'Server broke connection')",""],["open_timeout","RestClient::Resource","RestClient/Resource.html#method-i-open_timeout","()",""],["options","RestClient","RestClient.html#method-c-options","(url, headers={}, &block)",""],["parse_url","RestClient::Request","RestClient/Request.html#method-i-parse_url","(url)",""],["parse_url_with_auth","RestClient::Request","RestClient/Request.html#method-i-parse_url_with_auth","(url)",""],["password","RestClient::Resource","RestClient/Resource.html#method-i-password","()",""],["patch","Net::HTTP::Protocol","Net/HTTP/Protocol.html#method-i-patch","(path, data, initheader = nil, dest = nil)","<p>Sends a PATCH request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["patch","RestClient","RestClient.html#method-c-patch","(url, payload, headers={}, &block)",""],["patch","RestClient::Resource","RestClient/Resource.html#method-i-patch","(payload, additional_headers={}, &block)",""],["post","RestClient","RestClient.html#method-c-post","(url, payload, headers={}, &block)",""],["post","RestClient::Resource","RestClient/Resource.html#method-i-post","(payload, additional_headers={}, &block)",""],["process_payload","RestClient::Request","RestClient/Request.html#method-i-process_payload","(p=nil, parent_key=nil)",""],["process_result","RestClient::Request","RestClient/Request.html#method-i-process_result","(res, & block)",""],["process_url_params","RestClient::Request","RestClient/Request.html#method-i-process_url_params","(url, headers)","<p>Extract the query parameters and append them to the url\n"],["put","RestClient","RestClient.html#method-c-put","(url, payload, headers={}, &block)",""],["put","RestClient::Resource","RestClient/Resource.html#method-i-put","(payload, additional_headers={}, &block)",""],["raw_headers","RestClient::AbstractResponse","RestClient/AbstractResponse.html#method-i-raw_headers","()","<p>The raw headers.\n"],["read","RestClient::Payload::Base","RestClient/Payload/Base.html#method-i-read","(bytes=nil)",""],["request","Net::HTTP","Net/HTTP.html#method-i-request","(req, body=nil, &block)",""],["reset_before_execution_procs","RestClient","RestClient.html#method-c-reset_before_execution_procs","()","<p>Reset the procs to be called before each request is executed.\n"],["return!","RestClient::AbstractResponse","RestClient/AbstractResponse.html#method-i-return-21","(request = nil, result = nil, & block)","<p>Return the default behavior corresponding to the response code: the\nresponse itself for code in 200..206 …\n"],["send_entity","Net::HTTP::Protocol","Net/HTTP/Protocol.html#method-i-send_entity","(path, data, initheader, dest, type, &block)","<p>Executes a request which uses a representation and returns its body.\n"],["setup_credentials","RestClient::Request","RestClient/Request.html#method-i-setup_credentials","(req)",""],["short_inspect","RestClient::Payload::Base","RestClient/Payload/Base.html#method-i-short_inspect","()",""],["size","RestClient::Payload::Base","RestClient/Payload/Base.html#method-i-size","()",""],["size","RestClient::Payload::Streamed","RestClient/Payload/Streamed.html#method-i-size","()",""],["size","RestClient::RawResponse","RestClient/RawResponse.html#method-i-size","()",""],["stringify_headers","RestClient::Request","RestClient/Request.html#method-i-stringify_headers","(headers)","<p>Return a hash of headers whose keys are capitalized strings\n"],["timeout","RestClient::Resource","RestClient/Resource.html#method-i-timeout","()",""],["to_i","RestClient::AbstractResponse","RestClient/AbstractResponse.html#method-i-to_i","()",""],["to_s","RestClient::Exception","RestClient/Exception.html#method-i-to_s","()",""],["to_s","RestClient::Payload::Base","RestClient/Payload/Base.html#method-i-to_s","(bytes=nil)",""],["to_s","RestClient::RawResponse","RestClient/RawResponse.html#method-i-to_s","()",""],["to_s","RestClient::RequestFailed","RestClient/RequestFailed.html#method-i-to_s","()",""],["to_s","RestClient::RequestFailed","RestClient/RequestFailed.html#method-i-to_s","()",""],["to_s","RestClient::Resource","RestClient/Resource.html#method-i-to_s","()",""],["transmit","RestClient::Request","RestClient/Request.html#method-i-transmit","(uri, req, payload, & block)",""],["type_for_extension","MIME::Types","MIME/Types.html#method-c-type_for_extension","(ext)",""],["type_for_extension","MIME::Types","MIME/Types.html#method-i-type_for_extension","(ext)","<p>Return the first found content-type for a value considered as an extension\nor the value itself\n"],["user","RestClient::Resource","RestClient/Resource.html#method-i-user","()",""],["version","RestClient","RestClient.html#method-c-version","()",""],["README","","README_rdoc.html","","<p>REST Client – simple DSL for accessing HTTP and REST resources\n<p>A simple HTTP and REST client for Ruby …\n"]]}}