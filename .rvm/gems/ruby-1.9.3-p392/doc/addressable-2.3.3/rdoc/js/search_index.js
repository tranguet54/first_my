var search_data = {"index":{"searchIndex":["addressable","idna","punycodebadinput","punycodebigoutput","punycodeoverflow","template","invalidtemplateoperatorerror","invalidtemplatevalueerror","matchdata","templateoperatorabortederror","uri","characterclasses","invalidurierror","version","+()","==()","===()","absolute?()","authority()","authority=()","basename()","captures()","convert_path()","default_port()","defer_validation()","display_uri()","dup()","encode()","encode_component()","eql?()","escape()","expand()","extname()","extract()","form_encode()","form_unencode()","fragment()","fragment=()","freeze()","hash()","heuristic_parse()","host()","host=()","hostname()","hostname=()","inferred_port()","inspect()","inspect()","inspect()","ip_based?()","ip_based_schemes()","join()","join()","join!()","keys()","keys()","match()","merge()","merge!()","new()","new()","new()","normalize()","normalize!()","normalize_component()","normalized_authority()","normalized_encode()","normalized_fragment()","normalized_host()","normalized_password()","normalized_path()","normalized_port()","normalized_query()","normalized_scheme()","normalized_site()","normalized_user()","normalized_userinfo()","omit()","omit!()","origin()","parse()","partial_expand()","password()","password=()","path()","path=()","port()","port=()","port_mapping()","query()","query=()","query_values()","query_values=()","relative?()","request_uri()","request_uri=()","route_from()","route_to()","scheme()","scheme=()","site()","site=()","to_ascii()","to_hash()","to_s()","to_str()","to_unicode()","unencode()","unencode_component()","unescape()","unescape_component()","unicode_normalize_kc()","user()","user=()","userinfo()","userinfo=()","values()","variable_defaults()","variables()","variables()"],"longSearchIndex":["addressable","addressable::idna","addressable::idna::punycodebadinput","addressable::idna::punycodebigoutput","addressable::idna::punycodeoverflow","addressable::template","addressable::template::invalidtemplateoperatorerror","addressable::template::invalidtemplatevalueerror","addressable::template::matchdata","addressable::template::templateoperatorabortederror","addressable::uri","addressable::uri::characterclasses","addressable::uri::invalidurierror","addressable::version","addressable::uri#+()","addressable::uri#==()","addressable::uri#===()","addressable::uri#absolute?()","addressable::uri#authority()","addressable::uri#authority=()","addressable::uri#basename()","addressable::template::matchdata#captures()","addressable::uri::convert_path()","addressable::uri#default_port()","addressable::uri#defer_validation()","addressable::uri#display_uri()","addressable::uri#dup()","addressable::uri::encode()","addressable::uri::encode_component()","addressable::uri#eql?()","addressable::uri::escape()","addressable::template#expand()","addressable::uri#extname()","addressable::template#extract()","addressable::uri::form_encode()","addressable::uri::form_unencode()","addressable::uri#fragment()","addressable::uri#fragment=()","addressable::uri#freeze()","addressable::uri#hash()","addressable::uri::heuristic_parse()","addressable::uri#host()","addressable::uri#host=()","addressable::uri#hostname()","addressable::uri#hostname=()","addressable::uri#inferred_port()","addressable::template#inspect()","addressable::template::matchdata#inspect()","addressable::uri#inspect()","addressable::uri#ip_based?()","addressable::uri::ip_based_schemes()","addressable::uri::join()","addressable::uri#join()","addressable::uri#join!()","addressable::template#keys()","addressable::template::matchdata#keys()","addressable::template#match()","addressable::uri#merge()","addressable::uri#merge!()","addressable::template::new()","addressable::template::matchdata::new()","addressable::uri::new()","addressable::uri#normalize()","addressable::uri#normalize!()","addressable::uri::normalize_component()","addressable::uri#normalized_authority()","addressable::uri::normalized_encode()","addressable::uri#normalized_fragment()","addressable::uri#normalized_host()","addressable::uri#normalized_password()","addressable::uri#normalized_path()","addressable::uri#normalized_port()","addressable::uri#normalized_query()","addressable::uri#normalized_scheme()","addressable::uri#normalized_site()","addressable::uri#normalized_user()","addressable::uri#normalized_userinfo()","addressable::uri#omit()","addressable::uri#omit!()","addressable::uri#origin()","addressable::uri::parse()","addressable::template#partial_expand()","addressable::uri#password()","addressable::uri#password=()","addressable::uri#path()","addressable::uri#path=()","addressable::uri#port()","addressable::uri#port=()","addressable::uri::port_mapping()","addressable::uri#query()","addressable::uri#query=()","addressable::uri#query_values()","addressable::uri#query_values=()","addressable::uri#relative?()","addressable::uri#request_uri()","addressable::uri#request_uri=()","addressable::uri#route_from()","addressable::uri#route_to()","addressable::uri#scheme()","addressable::uri#scheme=()","addressable::uri#site()","addressable::uri#site=()","addressable::idna::to_ascii()","addressable::uri#to_hash()","addressable::uri#to_s()","addressable::uri#to_str()","addressable::idna::to_unicode()","addressable::uri::unencode()","addressable::uri::unencode_component()","addressable::uri::unescape()","addressable::uri::unescape_component()","addressable::idna::unicode_normalize_kc()","addressable::uri#user()","addressable::uri#user=()","addressable::uri#userinfo()","addressable::uri#userinfo=()","addressable::template::matchdata#values()","addressable::template#variable_defaults()","addressable::template#variables()","addressable::template::matchdata#variables()"],"info":[["Addressable","","Addressable.html","","<p>Addressable is a library for processing links and URIs.\n"],["Addressable::IDNA","","Addressable/IDNA.html","",""],["Addressable::IDNA::PunycodeBadInput","","Addressable/IDNA/PunycodeBadInput.html","","<p>Input is invalid.\n"],["Addressable::IDNA::PunycodeBigOutput","","Addressable/IDNA/PunycodeBigOutput.html","","<p>Output would exceed the space provided.\n"],["Addressable::IDNA::PunycodeOverflow","","Addressable/IDNA/PunycodeOverflow.html","","<p>Input needs wider integers to process.\n"],["Addressable::Template","","Addressable/Template.html","","<p>This is an implementation of a URI template based on RFC 6570\n(tools.ietf.org/html/rfc6570).\n"],["Addressable::Template::InvalidTemplateOperatorError","","Addressable/Template/InvalidTemplateOperatorError.html","","<p>Raised if an invalid template operator is used in a pattern.\n"],["Addressable::Template::InvalidTemplateValueError","","Addressable/Template/InvalidTemplateValueError.html","","<p>Raised if an invalid template value is supplied.\n"],["Addressable::Template::MatchData","","Addressable/Template/MatchData.html","","<p>This class represents the data that is extracted when a Template is matched\nagainst a URI.\n"],["Addressable::Template::TemplateOperatorAbortedError","","Addressable/Template/TemplateOperatorAbortedError.html","","<p>Raised if an invalid template operator is used in a pattern.\n"],["Addressable::URI","","Addressable/URI.html","","<p>This is an implementation of a URI parser based on &lt;a\nhref=“www.ietf.org/rfc/rfc3986.txt”>RFC …\n"],["Addressable::URI::CharacterClasses","","Addressable/URI/CharacterClasses.html","","<p>Container for the character classes specified in &lt;a\nhref=“www.ietf.org/rfc/rfc3986.txt”>RFC 3986&lt;/a&gt;. …\n"],["Addressable::URI::InvalidURIError","","Addressable/URI/InvalidURIError.html","","<p>Raised if something other than a uri is supplied.\n"],["Addressable::VERSION","","Addressable/VERSION.html","",""],["+","Addressable::URI","Addressable/URI.html#method-i-2B","(uri)",""],["==","Addressable::URI","Addressable/URI.html#method-i-3D-3D","(uri)","<p>Returns <code>true</code> if the URI objects are equal. This method\nnormalizes both URIs before doing the comparison. …\n"],["===","Addressable::URI","Addressable/URI.html#method-i-3D-3D-3D","(uri)","<p>Returns <code>true</code> if the URI objects are equal. This method\nnormalizes both URIs before doing the comparison, …\n"],["absolute?","Addressable::URI","Addressable/URI.html#method-i-absolute-3F","()","<p>Determines if the URI is absolute.\n<p>@return [TrueClass, FalseClass]\n\n<pre>&lt;code&gt;true&lt;/code&gt; if the URI is absolute. ...</pre>\n"],["authority","Addressable::URI","Addressable/URI.html#method-i-authority","()","<p>The authority component for this URI. Combines the user, password, host,\nand port components.\n<p>@return …\n"],["authority=","Addressable::URI","Addressable/URI.html#method-i-authority-3D","(new_authority)","<p>Sets the authority component for this URI.\n<p>@param [String, #to_str] new_authority The new authority component. …\n"],["basename","Addressable::URI","Addressable/URI.html#method-i-basename","()","<p>The basename, if any, of the file in the path component.\n<p>@return [String] The path’s basename.\n"],["captures","Addressable::Template::MatchData","Addressable/Template/MatchData.html#method-i-captures","()",""],["convert_path","Addressable::URI","Addressable/URI.html#method-c-convert_path","(path)","<p>Converts a path to a file scheme URI. If the path supplied is relative, it\nwill be returned as a relative …\n"],["default_port","Addressable::URI","Addressable/URI.html#method-i-default_port","()","<p>The default port for this URI’s scheme. This method will always returns the\ndefault port for the URI’s …\n"],["defer_validation","Addressable::URI","Addressable/URI.html#method-i-defer_validation","(&block)","<p>This method allows you to make several changes to a URI simultaneously,\nwhich separately would cause …\n"],["display_uri","Addressable::URI","Addressable/URI.html#method-i-display_uri","()","<p>Creates a URI suitable for display to users. If semantic attacks are\nlikely, the application should try …\n"],["dup","Addressable::URI","Addressable/URI.html#method-i-dup","()","<p>Clones the URI object.\n<p>@return [Addressable::URI] The cloned URI.\n"],["encode","Addressable::URI","Addressable/URI.html#method-c-encode","(uri, return_type=String)","<p>Percent encodes any special characters in the URI.\n<p>@param [String, Addressable::URI, #to_str] uri\n\n<pre>The URI ...</pre>\n"],["encode_component","Addressable::URI","Addressable/URI.html#method-c-encode_component","(component, character_class= CharacterClasses::RESERVED + CharacterClasses::UNRESERVED, upcase_encoded='')","<p>Percent encodes a URI component.\n<p>@param [String, #to_str] component The URI component to encode.\n<p>@param …\n"],["eql?","Addressable::URI","Addressable/URI.html#method-i-eql-3F","(uri)","<p>Returns <code>true</code> if the URI objects are equal. This method does\nNOT normalize either URI before doing the …\n"],["escape","Addressable::URI","Addressable/URI.html#method-c-escape","(uri, return_type=String)",""],["expand","Addressable::Template","Addressable/Template.html#method-i-expand","(mapping, processor=nil)","<p>Expands a URI template into a full URI.\n<p>@param [Hash] mapping The mapping that corresponds to the pattern. …\n"],["extname","Addressable::URI","Addressable/URI.html#method-i-extname","()","<p>The extname, if any, of the file in the path component. Empty string if\nthere is no extension.\n<p>@return …\n"],["extract","Addressable::Template","Addressable/Template.html#method-i-extract","(uri, processor=nil)","<p>Extracts a mapping from the URI using a URI Template pattern.\n<p>@param [Addressable::URI, #to_str] uri\n\n<pre>The ...</pre>\n"],["form_encode","Addressable::URI","Addressable/URI.html#method-c-form_encode","(form_values, sort=false)","<p>Encodes a set of key/value pairs according to the rules for the\n<code>application/x-www-form-urlencoded</code> MIME …\n"],["form_unencode","Addressable::URI","Addressable/URI.html#method-c-form_unencode","(encoded_value)","<p>Decodes a <code>String</code> according to the rules for the\n<code>application/x-www-form-urlencoded</code> MIME type.\n<p>@param [ …\n"],["fragment","Addressable::URI","Addressable/URI.html#method-i-fragment","()","<p>The fragment component for this URI.\n<p>@return [String] The fragment component.\n"],["fragment=","Addressable::URI","Addressable/URI.html#method-i-fragment-3D","(new_fragment)","<p>Sets the fragment component for this URI.\n<p>@param [String, #to_str] new_fragment The new fragment component. …\n"],["freeze","Addressable::URI","Addressable/URI.html#method-i-freeze","()","<p>Freeze URI, initializing instance variables.\n<p>@return [Addressable::URI] The frozen URI object.\n"],["hash","Addressable::URI","Addressable/URI.html#method-i-hash","()","<p>A hash value that will make a URI equivalent to its normalized form.\n<p>@return [Integer] A hash of the  …\n"],["heuristic_parse","Addressable::URI","Addressable/URI.html#method-c-heuristic_parse","(uri, hints={})","<p>Converts an input to a URI. The input does not have to be a valid URI — the\nmethod will use heuristics …\n"],["host","Addressable::URI","Addressable/URI.html#method-i-host","()","<p>The host component for this URI.\n<p>@return [String] The host component.\n"],["host=","Addressable::URI","Addressable/URI.html#method-i-host-3D","(new_host)","<p>Sets the host component for this URI.\n<p>@param [String, #to_str] new_host The new host component.\n"],["hostname","Addressable::URI","Addressable/URI.html#method-i-hostname","()","<p>@see Addressable::URI#host\n"],["hostname=","Addressable::URI","Addressable/URI.html#method-i-hostname-3D","(new_host)","<p>@see Addressable::URI#host=\n"],["inferred_port","Addressable::URI","Addressable/URI.html#method-i-inferred_port","()","<p>The inferred port component for this URI. This method will normalize to the\ndefault port for the URI’s …\n"],["inspect","Addressable::Template","Addressable/Template.html#method-i-inspect","()","<p>Returns a <code>String</code> representation of the Template object’s\nstate.\n<p>@return [String] The Template object’s …\n"],["inspect","Addressable::Template::MatchData","Addressable/Template/MatchData.html#method-i-inspect","()","<p>Returns a <code>String</code> representation of the MatchData’s state.\n<p>@return [String] The MatchData’s state, as a …\n"],["inspect","Addressable::URI","Addressable/URI.html#method-i-inspect","()","<p>Returns a <code>String</code> representation of the URI object’s state.\n<p>@return [String] The URI object’s state, as …\n"],["ip_based?","Addressable::URI","Addressable/URI.html#method-i-ip_based-3F","()","<p>Determines if the scheme indicates an IP-based protocol.\n<p>@return [TrueClass, FalseClass]\n\n<pre>&lt;code&gt;true&lt;/code&gt; ...</pre>\n"],["ip_based_schemes","Addressable::URI","Addressable/URI.html#method-c-ip_based_schemes","()","<p>Returns an array of known ip-based schemes. These schemes typically use a\nsimilar URI form:\n<code>//&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;url-path&gt;</code>\n…\n"],["join","Addressable::URI","Addressable/URI.html#method-c-join","(*uris)","<p>Joins several URIs together.\n<p>@param [String, Addressable::URI, #to_str] *uris\n\n<pre>The URIs to join.</pre>\n"],["join","Addressable::URI","Addressable/URI.html#method-i-join","(uri)","<p>Joins two URIs together.\n<p>@param [String, Addressable::URI, #to_str] The URI to join with.\n<p>@return [Addressable::URI] …\n"],["join!","Addressable::URI","Addressable/URI.html#method-i-join-21","(uri)","<p>Destructive form of <code>join</code>.\n<p>@param [String, Addressable::URI, #to_str] The URI to join with.\n<p>@return [Addressable::URI] …\n"],["keys","Addressable::Template","Addressable/Template.html#method-i-keys","()",""],["keys","Addressable::Template::MatchData","Addressable/Template/MatchData.html#method-i-keys","()",""],["match","Addressable::Template","Addressable/Template.html#method-i-match","(uri, processor=nil)","<p>Extracts match data from the URI using a URI Template pattern.\n<p>@param [Addressable::URI, #to_str] uri …\n"],["merge","Addressable::URI","Addressable/URI.html#method-i-merge","(hash)","<p>Merges a URI with a <code>Hash</code> of components. This method has\ndifferent behavior from <code>join</code>. Any components …\n"],["merge!","Addressable::URI","Addressable/URI.html#method-i-merge-21","(uri)","<p>Destructive form of <code>merge</code>.\n<p>@param [Hash, Addressable::URI, #to_hash] The components to merge with.\n<p>@return …\n"],["new","Addressable::Template","Addressable/Template.html#method-c-new","(pattern)","<p>Creates a new <code>Addressable::Template</code> object.\n<p>@param [#to_str] pattern The URI Template pattern.\n<p>@return …\n"],["new","Addressable::Template::MatchData","Addressable/Template/MatchData.html#method-c-new","(uri, template, mapping)","<p>Creates a new MatchData object. MatchData objects should never be\ninstantiated directly.\n<p>@param [Addressable::URI] …\n"],["new","Addressable::URI","Addressable/URI.html#method-c-new","(options={})","<p>Creates a new uri object from component parts.\n<p>@option [String, #to_str] scheme The scheme component. …\n"],["normalize","Addressable::URI","Addressable/URI.html#method-i-normalize","()","<p>Returns a normalized URI object.\n<p>NOTE: This method does not attempt to fully conform to specifications. …\n"],["normalize!","Addressable::URI","Addressable/URI.html#method-i-normalize-21","()","<p>Destructively normalizes this URI object.\n<p>@return [Addressable::URI] The normalized URI.\n<p>@see Addressable::URI#normalize …\n"],["normalize_component","Addressable::URI","Addressable/URI.html#method-c-normalize_component","(component, character_class= CharacterClasses::RESERVED + CharacterClasses::UNRESERVED, leave_encoded='')","<p>Normalizes the encoding of a URI component.\n<p>@param [String, #to_str] component The URI component to encode. …\n"],["normalized_authority","Addressable::URI","Addressable/URI.html#method-i-normalized_authority","()","<p>The authority component for this URI, normalized.\n<p>@return [String] The authority component, normalized. …\n"],["normalized_encode","Addressable::URI","Addressable/URI.html#method-c-normalized_encode","(uri, return_type=String)","<p>Normalizes the encoding of a URI. Characters within a hostname are not\npercent encoded to allow for internationalized …\n"],["normalized_fragment","Addressable::URI","Addressable/URI.html#method-i-normalized_fragment","()","<p>The fragment component for this URI, normalized.\n<p>@return [String] The fragment component, normalized. …\n"],["normalized_host","Addressable::URI","Addressable/URI.html#method-i-normalized_host","()","<p>The host component for this URI, normalized.\n<p>@return [String] The host component, normalized.\n"],["normalized_password","Addressable::URI","Addressable/URI.html#method-i-normalized_password","()","<p>The password component for this URI, normalized.\n<p>@return [String] The password component, normalized. …\n"],["normalized_path","Addressable::URI","Addressable/URI.html#method-i-normalized_path","()","<p>The path component for this URI, normalized.\n<p>@return [String] The path component, normalized.\n"],["normalized_port","Addressable::URI","Addressable/URI.html#method-i-normalized_port","()","<p>The port component for this URI, normalized.\n<p>@return [Integer] The port component, normalized.\n"],["normalized_query","Addressable::URI","Addressable/URI.html#method-i-normalized_query","()","<p>The query component for this URI, normalized.\n<p>@return [String] The query component, normalized.\n"],["normalized_scheme","Addressable::URI","Addressable/URI.html#method-i-normalized_scheme","()","<p>The scheme component for this URI, normalized.\n<p>@return [String] The scheme component, normalized.\n"],["normalized_site","Addressable::URI","Addressable/URI.html#method-i-normalized_site","()","<p>The normalized combination of components that represent a site. Combines\nthe scheme, user, password, …\n"],["normalized_user","Addressable::URI","Addressable/URI.html#method-i-normalized_user","()","<p>The user component for this URI, normalized.\n<p>@return [String] The user component, normalized.\n"],["normalized_userinfo","Addressable::URI","Addressable/URI.html#method-i-normalized_userinfo","()","<p>The userinfo component for this URI, normalized.\n<p>@return [String] The userinfo component, normalized. …\n"],["omit","Addressable::URI","Addressable/URI.html#method-i-omit","(*components)","<p>Omits components from a URI.\n<p>@param [Symbol] *components The components to be omitted.\n<p>@return [Addressable::URI] …\n"],["omit!","Addressable::URI","Addressable/URI.html#method-i-omit-21","(*components)","<p>Destructive form of omit.\n<p>@param [Symbol] *components The components to be omitted.\n<p>@return [Addressable::URI] …\n"],["origin","Addressable::URI","Addressable/URI.html#method-i-origin","()","<p>The origin for this URI, serialized to ASCII, as per\ndraft-ietf-websec-origin-00, section 5.2.\n<p>@return …\n"],["parse","Addressable::URI","Addressable/URI.html#method-c-parse","(uri)","<p>Returns a URI object based on the parsed string.\n<p>@param [String, Addressable::URI, #to_str] uri\n\n<pre>The URI ...</pre>\n"],["partial_expand","Addressable::Template","Addressable/Template.html#method-i-partial_expand","(mapping, processor=nil)","<p>Expands a URI template into another URI template.\n<p>@param [Hash] mapping The mapping that corresponds to …\n"],["password","Addressable::URI","Addressable/URI.html#method-i-password","()","<p>The password component for this URI.\n<p>@return [String] The password component.\n"],["password=","Addressable::URI","Addressable/URI.html#method-i-password-3D","(new_password)","<p>Sets the password component for this URI.\n<p>@param [String, #to_str] new_password The new password component. …\n"],["path","Addressable::URI","Addressable/URI.html#method-i-path","()","<p>The path component for this URI.\n<p>@return [String] The path component.\n"],["path=","Addressable::URI","Addressable/URI.html#method-i-path-3D","(new_path)","<p>Sets the path component for this URI.\n<p>@param [String, #to_str] new_path The new path component.\n"],["port","Addressable::URI","Addressable/URI.html#method-i-port","()","<p>The port component for this URI. This is the port number actually given in\nthe URI. This does not infer …\n"],["port=","Addressable::URI","Addressable/URI.html#method-i-port-3D","(new_port)","<p>Sets the port component for this URI.\n<p>@param [String, Integer, #to_s] new_port The new port component. …\n"],["port_mapping","Addressable::URI","Addressable/URI.html#method-c-port_mapping","()","<p>Returns a hash of common IP-based schemes and their default port numbers.\nAdding new schemes to this …\n"],["query","Addressable::URI","Addressable/URI.html#method-i-query","()","<p>The query component for this URI.\n<p>@return [String] The query component.\n"],["query=","Addressable::URI","Addressable/URI.html#method-i-query-3D","(new_query)","<p>Sets the query component for this URI.\n<p>@param [String, #to_str] new_query The new query component.\n"],["query_values","Addressable::URI","Addressable/URI.html#method-i-query_values","(return_type=Hash)","<p>Converts the query component to a Hash value.\n<p>@param [Class] return_type The return type desired. Value …\n"],["query_values=","Addressable::URI","Addressable/URI.html#method-i-query_values-3D","(new_query_values)","<p>Sets the query component for this URI from a Hash object. An empty Hash or\nArray will result in an empty …\n"],["relative?","Addressable::URI","Addressable/URI.html#method-i-relative-3F","()","<p>Determines if the URI is relative.\n<p>@return [TrueClass, FalseClass]\n\n<pre>&lt;code&gt;true&lt;/code&gt; if the URI is relative. ...</pre>\n"],["request_uri","Addressable::URI","Addressable/URI.html#method-i-request_uri","()","<p>The HTTP request URI for this URI.  This is the path and the query string.\n<p>@return [String] The request …\n"],["request_uri=","Addressable::URI","Addressable/URI.html#method-i-request_uri-3D","(new_request_uri)","<p>Sets the HTTP request URI for this URI.\n<p>@param [String, #to_str] new_request_uri The new HTTP request …\n"],["route_from","Addressable::URI","Addressable/URI.html#method-i-route_from","(uri)","<p>Returns the shortest normalized relative form of this URI that uses the\nsupplied URI as a base for resolution. …\n"],["route_to","Addressable::URI","Addressable/URI.html#method-i-route_to","(uri)","<p>Returns the shortest normalized relative form of the supplied URI that uses\nthis URI as a base for resolution. …\n"],["scheme","Addressable::URI","Addressable/URI.html#method-i-scheme","()","<p>The scheme component for this URI.\n<p>@return [String] The scheme component.\n"],["scheme=","Addressable::URI","Addressable/URI.html#method-i-scheme-3D","(new_scheme)","<p>Sets the scheme component for this URI.\n<p>@param [String, #to_str] new_scheme The new scheme component. …\n"],["site","Addressable::URI","Addressable/URI.html#method-i-site","()","<p>The combination of components that represent a site. Combines the scheme,\nuser, password, host, and port …\n"],["site=","Addressable::URI","Addressable/URI.html#method-i-site-3D","(new_site)","<p>Sets the site value for this URI.\n<p>@param [String, #to_str] new_site The new site value.\n"],["to_ascii","Addressable::IDNA","Addressable/IDNA.html#method-c-to_ascii","(input)","<p>Converts from a Unicode internationalized domain name to an ASCII domain\nname as described in RFC 3490. …\n"],["to_hash","Addressable::URI","Addressable/URI.html#method-i-to_hash","()","<p>Returns a Hash of the URI components.\n<p>@return [Hash] The URI as a <code>Hash</code> of components.\n"],["to_s","Addressable::URI","Addressable/URI.html#method-i-to_s","()","<p>Converts the URI to a <code>String</code>.\n<p>@return [String] The URI’s <code>String</code> representation.\n"],["to_str","Addressable::URI","Addressable/URI.html#method-i-to_str","()","<p>URI’s are glorified <code>Strings</code>. Allow implicit conversion.\n"],["to_unicode","Addressable::IDNA","Addressable/IDNA.html#method-c-to_unicode","(input)","<p>Converts from an ASCII domain name to a Unicode internationalized domain\nname as described in RFC 3490. …\n"],["unencode","Addressable::URI","Addressable/URI.html#method-c-unencode","(uri, return_type=String, leave_encoded='')","<p>Unencodes any percent encoded characters within a URI component. This\nmethod may be used for unencoding …\n"],["unencode_component","Addressable::URI","Addressable/URI.html#method-c-unencode_component","(uri, return_type=String, leave_encoded='')",""],["unescape","Addressable::URI","Addressable/URI.html#method-c-unescape","(uri, return_type=String, leave_encoded='')",""],["unescape_component","Addressable::URI","Addressable/URI.html#method-c-unescape_component","(uri, return_type=String, leave_encoded='')",""],["unicode_normalize_kc","Addressable::IDNA","Addressable/IDNA.html#method-c-unicode_normalize_kc","(input)","<p>Unicode normalization form KC.\n"],["user","Addressable::URI","Addressable/URI.html#method-i-user","()","<p>The user component for this URI.\n<p>@return [String] The user component.\n"],["user=","Addressable::URI","Addressable/URI.html#method-i-user-3D","(new_user)","<p>Sets the user component for this URI.\n<p>@param [String, #to_str] new_user The new user component.\n"],["userinfo","Addressable::URI","Addressable/URI.html#method-i-userinfo","()","<p>The userinfo component for this URI. Combines the user and password\ncomponents.\n<p>@return [String] The userinfo …\n"],["userinfo=","Addressable::URI","Addressable/URI.html#method-i-userinfo-3D","(new_userinfo)","<p>Sets the userinfo component for this URI.\n<p>@param [String, #to_str] new_userinfo The new userinfo component. …\n"],["values","Addressable::Template::MatchData","Addressable/Template/MatchData.html#method-i-values","()","<p>@return [Array]\n\n<pre>The list of values that were captured by the Template.\nNote that this list will include ...</pre>\n"],["variable_defaults","Addressable::Template","Addressable/Template.html#method-i-variable_defaults","()","<p>Returns a mapping of variables to their default values specified in the\ntemplate. Variables without defaults …\n"],["variables","Addressable::Template","Addressable/Template.html#method-i-variables","()","<p>Returns an Array of variables used within the template pattern. The\nvariables are listed in the Array …\n"],["variables","Addressable::Template::MatchData","Addressable/Template/MatchData.html#method-i-variables","()","<p>@return [Array]\n\n<pre>The list of variables that were present in the Template.\nNote that this list will include ...</pre>\n"]]}}